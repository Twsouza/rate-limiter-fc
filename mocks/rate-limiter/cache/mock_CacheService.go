// Code generated by mockery v2.46.3. DO NOT EDIT.

package cache

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheService is an autogenerated mock type for the CacheService type
type MockCacheService struct {
	mock.Mock
}

type MockCacheService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheService) EXPECT() *MockCacheService_Expecter {
	return &MockCacheService_Expecter{mock: &_m.Mock}
}

// Block provides a mock function with given fields: ctx, key, blockDuration
func (_m *MockCacheService) Block(ctx context.Context, key string, blockDuration time.Duration) error {
	ret := _m.Called(ctx, key, blockDuration)

	if len(ret) == 0 {
		panic("no return value specified for Block")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, key, blockDuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheService_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type MockCacheService_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - blockDuration time.Duration
func (_e *MockCacheService_Expecter) Block(ctx interface{}, key interface{}, blockDuration interface{}) *MockCacheService_Block_Call {
	return &MockCacheService_Block_Call{Call: _e.mock.On("Block", ctx, key, blockDuration)}
}

func (_c *MockCacheService_Block_Call) Run(run func(ctx context.Context, key string, blockDuration time.Duration)) *MockCacheService_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCacheService_Block_Call) Return(_a0 error) *MockCacheService_Block_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheService_Block_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *MockCacheService_Block_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockCacheService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockCacheService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockCacheService_Expecter) Close() *MockCacheService_Close_Call {
	return &MockCacheService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockCacheService_Close_Call) Run(run func()) *MockCacheService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheService_Close_Call) Return(_a0 error) *MockCacheService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheService_Close_Call) RunAndReturn(run func() error) *MockCacheService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockCacheService) Get(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheService_Expecter) Get(ctx interface{}, key interface{}) *MockCacheService_Get_Call {
	return &MockCacheService_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockCacheService_Get_Call) Run(run func(ctx context.Context, key string)) *MockCacheService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheService_Get_Call) Return(_a0 int, _a1 error) *MockCacheService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheService_Get_Call) RunAndReturn(run func(context.Context, string) (int, error)) *MockCacheService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function with given fields: ctx, key, expiry
func (_m *MockCacheService) Increment(ctx context.Context, key string, expiry time.Duration) (int, error) {
	ret := _m.Called(ctx, key, expiry)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (int, error)); ok {
		return rf(ctx, key, expiry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) int); ok {
		r0 = rf(ctx, key, expiry)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, key, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheService_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockCacheService_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiry time.Duration
func (_e *MockCacheService_Expecter) Increment(ctx interface{}, key interface{}, expiry interface{}) *MockCacheService_Increment_Call {
	return &MockCacheService_Increment_Call{Call: _e.mock.On("Increment", ctx, key, expiry)}
}

func (_c *MockCacheService_Increment_Call) Run(run func(ctx context.Context, key string, expiry time.Duration)) *MockCacheService_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCacheService_Increment_Call) Return(_a0 int, _a1 error) *MockCacheService_Increment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheService_Increment_Call) RunAndReturn(run func(context.Context, string, time.Duration) (int, error)) *MockCacheService_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// IsBlocked provides a mock function with given fields: ctx, key
func (_m *MockCacheService) IsBlocked(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for IsBlocked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheService_IsBlocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBlocked'
type MockCacheService_IsBlocked_Call struct {
	*mock.Call
}

// IsBlocked is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheService_Expecter) IsBlocked(ctx interface{}, key interface{}) *MockCacheService_IsBlocked_Call {
	return &MockCacheService_IsBlocked_Call{Call: _e.mock.On("IsBlocked", ctx, key)}
}

func (_c *MockCacheService_IsBlocked_Call) Run(run func(ctx context.Context, key string)) *MockCacheService_IsBlocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheService_IsBlocked_Call) Return(_a0 bool, _a1 error) *MockCacheService_IsBlocked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheService_IsBlocked_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockCacheService_IsBlocked_Call {
	_c.Call.Return(run)
	return _c
}

// SetExpiration provides a mock function with given fields: ctx, key, expiry
func (_m *MockCacheService) SetExpiration(ctx context.Context, key string, expiry time.Duration) error {
	ret := _m.Called(ctx, key, expiry)

	if len(ret) == 0 {
		panic("no return value specified for SetExpiration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, key, expiry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheService_SetExpiration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExpiration'
type MockCacheService_SetExpiration_Call struct {
	*mock.Call
}

// SetExpiration is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiry time.Duration
func (_e *MockCacheService_Expecter) SetExpiration(ctx interface{}, key interface{}, expiry interface{}) *MockCacheService_SetExpiration_Call {
	return &MockCacheService_SetExpiration_Call{Call: _e.mock.On("SetExpiration", ctx, key, expiry)}
}

func (_c *MockCacheService_SetExpiration_Call) Run(run func(ctx context.Context, key string, expiry time.Duration)) *MockCacheService_SetExpiration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCacheService_SetExpiration_Call) Return(_a0 error) *MockCacheService_SetExpiration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheService_SetExpiration_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *MockCacheService_SetExpiration_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheService creates a new instance of MockCacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheService {
	mock := &MockCacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
