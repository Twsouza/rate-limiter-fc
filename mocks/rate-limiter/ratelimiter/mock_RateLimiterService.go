// Code generated by mockery v2.46.3. DO NOT EDIT.

package ratelimiter

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockRateLimiterService is an autogenerated mock type for the RateLimiterService type
type MockRateLimiterService struct {
	mock.Mock
}

type MockRateLimiterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRateLimiterService) EXPECT() *MockRateLimiterService_Expecter {
	return &MockRateLimiterService_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function with given fields: key
func (_m *MockRateLimiterService) Allow(key string) (bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Allow")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRateLimiterService_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type MockRateLimiterService_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
//   - key string
func (_e *MockRateLimiterService_Expecter) Allow(key interface{}) *MockRateLimiterService_Allow_Call {
	return &MockRateLimiterService_Allow_Call{Call: _e.mock.On("Allow", key)}
}

func (_c *MockRateLimiterService_Allow_Call) Run(run func(key string)) *MockRateLimiterService_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRateLimiterService_Allow_Call) Return(_a0 bool, _a1 error) *MockRateLimiterService_Allow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRateLimiterService_Allow_Call) RunAndReturn(run func(string) (bool, error)) *MockRateLimiterService_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// GetKey provides a mock function with given fields: gc
func (_m *MockRateLimiterService) GetKey(gc *gin.Context) string {
	ret := _m.Called(gc)

	if len(ret) == 0 {
		panic("no return value specified for GetKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*gin.Context) string); ok {
		r0 = rf(gc)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRateLimiterService_GetKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKey'
type MockRateLimiterService_GetKey_Call struct {
	*mock.Call
}

// GetKey is a helper method to define mock.On call
//   - gc *gin.Context
func (_e *MockRateLimiterService_Expecter) GetKey(gc interface{}) *MockRateLimiterService_GetKey_Call {
	return &MockRateLimiterService_GetKey_Call{Call: _e.mock.On("GetKey", gc)}
}

func (_c *MockRateLimiterService_GetKey_Call) Run(run func(gc *gin.Context)) *MockRateLimiterService_GetKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockRateLimiterService_GetKey_Call) Return(_a0 string) *MockRateLimiterService_GetKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRateLimiterService_GetKey_Call) RunAndReturn(run func(*gin.Context) string) *MockRateLimiterService_GetKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRateLimiterService creates a new instance of MockRateLimiterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateLimiterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateLimiterService {
	mock := &MockRateLimiterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
